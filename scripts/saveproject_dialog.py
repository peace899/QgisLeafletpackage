# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGISLeafletPackageDialog
                                 A QGIS plugin
 Export your project to a leaflet webpage/app with data stored in a geopackage.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-01-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Peace
        email                : peacester@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from PyQt5 import QtCore, QtWidgets, QtGui
from qgis.core import QgsMessageLog, QgsProject

from .qlp import LeafExport

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'saveproject_dialog_base.ui'))


class QGISLeafletPackageDialog(QtWidgets.QDialog, FORM_CLASS):
    closed = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QGISLeafletPackageDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect 
             
        layout = QtWidgets.QVBoxLayout()
        projectLayout = QtWidgets.QHBoxLayout()
        projectLayout.addWidget(QtWidgets.QLabel('Current project:'))
        self.projectLine = QtWidgets.QLineEdit()
        self.projectLine.setReadOnly(True) 
        projectLayout.addWidget(self.projectLine)
        layout.addLayout(projectLayout)
        layout.addWidget(QtWidgets.QLabel('Select Output Directory:'))
        directoryLayout = QtWidgets.QHBoxLayout()
        self.outputDirectory = QtWidgets.QLineEdit()
        selectBtn = QtWidgets.QPushButton('...')
        directoryLayout.addWidget(self.outputDirectory)
        directoryLayout.addWidget(selectBtn)
        selectBtn.clicked.connect(self.getOutputDirectory)

        self.feedbackWidget = QtWidgets.QTextEdit() 
              
        layout.addLayout(directoryLayout)

        buttonsLayout = QtWidgets.QHBoxLayout()
        exportButton = QtWidgets.QPushButton('Export')
        exportButton.clicked.connect(self.run)
        cancelButton = QtWidgets.QPushButton('Cancel')
        cancelButton.clicked.connect(lambda: self.close())
        buttonsLayout.addWidget(exportButton)
        buttonsLayout.addWidget(cancelButton)           
        
        self.check_project()

        layout.addWidget(self.feedbackWidget)
        layout.addLayout(buttonsLayout)
        self.setLayout(layout)
        self.resize(630, 350)
        self.setWindowTitle("QGISLeafletPackage Exporter")

    def closeEvent(self, event):
        self.closed.emit()

    
    def append_feedback(self, text):
        if 'Processing progress' in text:
            text = text + '%'
            self.feedbackWidget.moveCursor(QtGui.QTextCursor.End, QtGui.QTextCursor.MoveAnchor)
            self.feedbackWidget.moveCursor(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.MoveAnchor)
            self.feedbackWidget.moveCursor(QtGui.QTextCursor.End, QtGui.QTextCursor.KeepAnchor)
            lastLine = self.feedbackWidget.textCursor().selectedText()
            if 'Processing progress' in lastLine:
                self.feedbackWidget.textCursor().removeSelectedText()
                self.feedbackWidget.textCursor().deletePreviousChar()
                # Last line of text
                self.feedbackWidget.append(text)
            else:
                self.feedbackWidget.append(text)            
        else:
            self.feedbackWidget.append(text)

    def save_project(self, outfile):
        self.project.write(outfile) 
        self.exporter.geopackage_add_project()
        
    
    def getOutputDirectory(self):
        savepath = QtWidgets.QFileDialog.getExistingDirectory(            
            caption='Select a folder'
        )
        self.outputDirectory.setText(savepath)

    def check_project(self):
        
        self.project = QgsProject.instance()
        
        if self.project.baseName():
            self.projectLine.setText(self.project.baseName())
        else:
            self.projectLine.setText('No active project!')
        

    def run(self):
        if self.projectLine.text() == 'No active project!':
            self.showDialog('No active project present. Please open project to export!')
            return

        if not self.outputDirectory.text():
            self.showDialog('Please select output directory.')
            return
        
        self.feedbackWidget.clear()

        self.export_thread = QtCore.QThread()
        self.exporter = LeafExport(self.project, self.outputDirectory.text())
        self.exporter.moveToThread(self.export_thread)
        self.export_thread.started.connect(self.exporter.run)
        self.exporter.feedback.connect(self.append_feedback) 
        self.exporter.saveproject.connect(self.save_project)       
        self.exporter.done.connect(self.export_thread.quit)
        self.export_thread.start()

    def showDialog(self, msg):
        msgBox = QtWidgets.QMessageBox()
        msgBox.setIcon(QtWidgets.QMessageBox.Warning)
        msgBox.setText(msg)
        msgBox.setWindowTitle("QGISLeafletPackage message")
        msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msgBox.exec_()

class ProjectCheck(QtCore.QThread):
    open = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        QtCore.QThread.__init__(self)
        self.continue_run = True
        
        
    def run(self):
        while self.continue_run:
            self.project = QgsProject().instance()
            if self.project.baseName():
                self.open.emit(self.project.baseName())
            else:
                self.open.emit('No active project!')
                        
            QtCore.QThread.sleep(3)
        

    def stop(self):
        self.continue_run = False
